#!/usr/bin/env node
/*/---------------------------------------------------------/*/
/*/ Craydent LLC deploy-v1.1.0                              /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
/* deploy_server params
	0=>interpreter/node command (not used)
	1=>node file being executed (not used)
	2=>env tier												(e)nvironment tier
	3=>socket port 											(s)ocket port
	4=>http port 											(h)ttp port
	5=>http auth username 									(u)sername
	6=>http auth password 									(p)asswod
	7=>ssh key location or 'create' 						(k)ey
	8=>email 												e(m)ail
	9=>git url 												(g)it url
	10=>project name 										(n)ame
	11=>yes/no to add webhooks 								(w)ebhooks
	12=>yes/no if the ssh key is already registered in git	(a)lready registered
	13=>the domain pointing to this server 					(d)omain
	14=>git username 										g(i)t username
	15=>git password										gi(t) password

version
	0=>interpreter/node command (not used)
	1=>node file being executed (not used)
	2=>version command										--version, -v

 actionable commands after initialization
	0=>interpreter/node command (not used)
	1=>node file being executed (not used)

add
 	2=>add command
	3=>git address[ssh url]
	4=>project name[default:git repo name]
	5=>create_webhooks[yes,no]
	6=>create_deploy_key[yes,no]
	7=>git username
	8=>git password
	9=>ssh key name[default:master_id_rsa]
rm
	3=>project name
backup
	3=>project name
build
	3=>project name
npminstall
	3=>project name
pull
	3=>project name
pullrestart
	3=>project name
pullsync
	3=>project name
restart
	3=>project name
start
	3=>project name
stop
	3=>project name
sync
	3=>project name

 */
const pkg = require('../package.json'),
	ns = !pkg.name.indexOf('@craydent/') ? "@craydent/" : "";


const $c = require(ns + 'craydent/noConflict');

// constant strings
const BASE_PATH = "/var/craydent/", CONFIG_PATH = BASE_PATH + "config/craydent-deploy/",
	APP_CONFIG = CONFIG_PATH + "craydent_deploy_config.json", SCRIPT_PATH =  __dirname + "/../shell_scripts/",
	DEPLOY_SCRIPT = SCRIPT_PATH + "deploy_script.sh",
	RESET_SCRIPT = SCRIPT_PATH + "reset_script.sh",
	CREATE_DIR_SCRIPT = SCRIPT_PATH + "create_dirs.sh",
	DELETE_SCRIPT = SCRIPT_PATH + "delete_project.sh",
	NODE_SCRIPT = SCRIPT_PATH + "node_script.sh",
	RM_ROUTE_SCRIPT = SCRIPT_PATH + "rm_routes_script.sh",
	NODE_PATH = BASE_PATH + "nodejs/craydent-deploy/", PROJECT_PATH = BASE_PATH + "nodejs/craydent-deploy/",
	GIT_PATH = BASE_PATH + "git/", LOG_BASE_PATH = BASE_PATH + "log/", LOG_PATH = LOG_BASE_PATH + "craydent-deploy/",
	KEY_PATH = BASE_PATH + "key/", CPROXY_PATH = '/var/craydent/config/craydent-proxy/pconfig.json',
	MASTER_KEY = 'master_id_rsa';

// constant objects
const yes = {yes: 1, y: 1};
const no = {no: 1, n: 1};
const LISTENERS = $c.include('../config/listeners.json',true);


// constant methods
const readline = require('readline');
const fs = require('fs');
const git = require('../libs/git_actions');

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
const run = $c.CLI.exec;
const question = $c.yieldable(rl.question, rl);
const fsstat = $c.yieldable(fs.stat, fs);
const fswrite = $c.yieldable(fs.writeFile, fs);
const fsread = $c.yieldable(fs.readFile, fs);


var utils = require('../libs/utils'),
	encrypt_password = utils.encrypt_password,
	correct_password = utils.correct_password,
	writeNodeConfig = utils.writeNodeConfig;

var apps = $c.include(APP_CONFIG, true) || [{
		"name": "craydent-deploy",
		"servers": ["index.js"],
		"logfile": [LOG_PATH + "index.log"],
		"size":{},
		"fd":{},
		"www": "",
		"nodejs":"",
		"webdir":"",
		"email":""
	}];
var nodeconfig = $c.include(CONFIG_PATH + 'nodeconfig');
var CL = new $c.CLI({
	name:"Craydent Deploy CLI",
	synopsis:"Command line interface to perform various deployment tasks.",
	description:"This CLI provides the ability to initialize Craydent Deploy, add, remove, back up, build, perform npm install, pull, restart, and stop projects/processes.",
	commands:{ add:[] }
});

CL
// add commands and options
	.command("version  \t- indicates the current version of Craydent Deploy.", []).
		action(version)
	.command("reset    \t- resets configs to a state before Cradyent Deploy was reinitialized.").
		action(reset)
	.command("uninstall\t- uninstalls Craydent Deploy from the system but leaves all project files and processes running.").
		action(uninstall)
	.command("rm",[{option: "-n,--name", type:"string", description:"[n]ame of the project to remove."}]).
		action(removeApp)


	.command("backup",[{option: "-n,--name", type:"string", description:"[n]ame of the project to backup."}]).
		action(appCommands)
	.command("build",[{option: "-n,--name", type:"string", description:"[n]ame of the project to build."}]).
		action(appCommands)
	.command("npminstall",[{option: "-n,--name", type:"string", description:"[n]ame of the project to perform an npm install."}]).
		action(appCommands)
	.command("pull",[{option: "-n,--name", type:"string", description:"[n]ame of the project to pull."}]).
		action(appCommands)
	.command("pullrestart",[{option: "-n,--name", type:"string", description:"[n]ame of the project to pull and restart."}]).
		action(appCommands)
	.command("pullsync",[{option: "-n,--name", type:"string", description:"[n]ame of the project to pull and sync web folders."}]).
		action(appCommands)
	.command("restart",[{option: "-n,--name", type:"string", description:"[n]ame of the project to restart."}]).
		action(appCommands)
	.command("start",[{option: "-n,--name", type:"string", description:"[n]ame of the project to start."}]).
		action(appCommands)
	.command("stop",[{option: "-n,--name", type:"string", description:"[n]ame of the project to stop."}]).
		action(appCommands)
	.command("sync:",[{option: "-n,--name", type:"string", description:"[n]ame of the project to sync web folders."}]).
		action(appCommands);

CL
// add command options
	.add({
		option: "-a,--gitaddress",
		type:"string",
		command:"add",
		description:"Git ssh [a]ddress of the project to add."
	})
	.add({
		option: "-n,--name",
		type:"string",
		command:"add",
		description:"[n]ame of the project (default is the git repository name)."
	})
	.add({
		option: "-w,--use-webhook",
		type:"string",
		command:"add",
		description:"Flag to indicate (yes/no) to add [w]ebhooks."
	})
	.add({
		option: "-r,--use-sshkey",
		type:"string",
		command:"add",
		description:"Flag to indicate (yes/no) to add a deploy [k]ey."
	})
	.add({
		option: "-g,--gituser",
		type:"string",
		command:"add",
		description:"[g]it username (with admin rights) to use when adding webhooks and/or deploy keys."
	})
	.add({
		option: "-i,--gitpassword",
		type:"string",
		command:"add",
		description:"g[i]t password (with admin rights) to use when adding webhooks and/or deploy keys."
	})
	.add({
		option: "-k,--sshkey",
		type:"string",
		command:"add",
		description:"ssh [k]ey to add for various git commands."
	}).
		action(addApp);

CL
// http auth add command options
	.add({
		option: "-u,--user",
		type:"string",
		command:"adduser",
		description:"Username to add."
	})
	.add({
		option: "-p,--password",
		type:"string",
		command:"adduser",
		description:"Password for the user."
	})
	.add({
		option: "-l,--access",
		type:"string",
		command:"adduser",
		description:"Access [l]evel to give the user."
	}).
		action(addUser);

CL
// http auth remove command options
	.add({
		option: "-u,--user",
		type:"string",
		command:"rmuser",
		description:"Username to remove."
	}).
		action(removeUser);

CL
// http auth update command options
	.add({
		option: "-u,--user",
		type:"string",
		command:"updateuser",
		description:"Username to update the password."
	})
	.add({
		option: "-p,--password",
		type:"string",
		command:"updateuser",
		description:"New password of the user."
	})
	.add({
		option: "-l,--access",
		type:"string",
		command:"updateuser",
		description:"Access [l]evel to give the user."
	}).
		action(updateUser);

CL
// init options
	.add({
		option: "-e,--environment",
		type:"string",
		description:"[e]nvironment for the current server."
	})
	.add({
		option: "-s,--socketport",
		type:"number",
		description:"Port number for the [s]ocket server to listen on."
	})
	.add({
		option: "-h,--httpport",
		type:"number",
		description:"Port number for the [h]ttp server to listen on."
	})
	.add({
		option: "-u,--httpuser",
		type:"string",
		description:"[u]sername for http authentication."
	})
	.add({
		option: "-p,--httppassword",
		type:"string",
		description:"[p]assword for http authentication."
	})
	.add({
		option: "-k,--sshkey",
		type:"string",
		description:"Path to SSH [k]ey to use or use 'create'."
	})
	.add({
		option: "-m,--email",
		type:"string",
		description:"E[m]ail used in ssh key and for alerts."
	})
	.add({
		option: "-a,--gitaddress",
		type:"string",
		description:"Git ssh [a]ddress of the project to add or use 'skip' to skip to skip adding a project."
	})
	.add({
		option: "-n,--name",
		type:"string",
		description:"[n]ame of the project (default is the git repository name)."
	})
	.add({
		option: "-w,--use-webhook",
		type:"string",
		description:"Flag to indicate (yes/no) to add [w]ebhooks."
	})
	.add({
		option: "-r,--sshkey-exists",
		type:"string",
		description:"Flag to indicate (yes/no) if deploy key is already [r]egistered in git."
	})
	.add({
		option: "-f,--fqdn",
		type:"string",
		description:"[f]ully qualified domain name for the current server deploy is running on."
	})
	.add({
		option: "-i,--gituser",
		type:"string",
		description:"G[i]t Username (with admin rights) to use when adding webhooks and/or deploy keys."
	})
	.add({
		option: "-t,--gitpassword",
		type:"string",
		description:"Gi[t] Password (with admin rights) to use when adding webhooks and/or deploy keys."
	}).
		action(init);

CL.add({
	option: "--version,-v",
	type:"string",
	description:"indicates the current version of Craydent Deploy."
}).
	action(version);

$c.catchAll(function(err){
	console.log(err);
	process.exit();
});

if (CL.isMan) {
	console.log(CL.renderMan());
	return process.exit();
}
if (CL.isHelp) {
	console.log(CL.renderHelp());
	return process.exit();
}
function version () {
//if (CL.commandName == "version" || CL.version || CL.v) {
	if (CL.CommandName == "version" || CL.version === true) {
		console.log(require('../package.json').version);
		return process.exit();
	}
}
function* reset () {
//if (CL.commandName == 'reset') {
//	return $c.syncroit(function*() {
	yield run(RESET_SCRIPT + " \"craydent-deploy\" \"index.js\" " + __dirname.replace('bin','') + ";");
	var status = false;
	try {
		status = (yield fsstat(CPROXY_PATH))[1];
		status && (yield run(RM_ROUTE_SCRIPT + " \"" + FQDN.replace(/https?:\/\/(.*?)(\/|\?|#|:|$).*/,'$1') + "\";"));
	} catch (e) { }
	console.log('Complete');
	process.exit();
	//});
}
function* uninstall () {
//if (CL.commandName == 'uninstall') {
//	return $c.syncroit(function*() {
	yield run(DEPLOY_SCRIPT + " \"craydent-deploy\" \"stop\" \"\" \"\" \"\" \"index.js\"");
	yield run(RESET_SCRIPT + " \"craydent-deploy\" \"index.js\" " + __dirname.replace('bin','') + ";");
	var status = false;
	try {
		status = (yield fsstat(CPROXY_PATH))[1];
		status && FQDN && (yield run(RM_ROUTE_SCRIPT + " '" + FQDN.replace(/https?:\/\/(.*?)(\/|\?|#|:|$).*/,'$1') + "';"));
	} catch (e) { }
	yield run("npm uninstall -g " + require('../package.json').name + ";");
	console.log('Complete');
	process.exit();
	//});
}
function* init () {
	if (CL.version === true) { return; }
	if (nodeconfig && CL.CommandName == "*") {
		yield run(NODE_SCRIPT + " \"craydent-deploy\" \"index.js\";");
		console.log('Completed');
		process.exit();
	}
	var ssh_file;

	//--------environment related
	var fqdn = global.FQDN = CL.fqdn || (yield question('What URL will be running this instance of cdeploy? (ex: http://www.example.com:80): '));
	var env = global.ENV = CL.environment || (yield question('What tier/environment is this server? (PROD): ')) || "PROD";
	var sport = global.SOCKET_PORT = CL.socketport || (yield question('What socket port do you want to use? (4900): ')) || 4900;
	var hport = global.HTTP_PORT = CL.httpport || (yield question('What server port do you want to use? (4800): ')) || 4800;
	var arrAuthu = (CL.httpuser ? CL.httpuser : (yield question('What HTTP Auth username do you want to use? (admin): ')) || 'admin').split(',');
	var arrAuthp = (CL.httppassword ? CL.httppassword : (yield question('What HTTP Auth password do you want to use? (admin): ')) || 'admin').split(',');
	global.HTTP_AUTH = {};
	var authu = arrAuthu[0];
	var authp = arrAuthp[0];

	for (var i = 0, len = arrAuthu.length; i < len; i++) {
		global.HTTP_AUTH[arrAuthu[i]] = {};
		global.HTTP_AUTH[arrAuthu[i]].access = ['*'];
		global.HTTP_AUTH[arrAuthu[i]].password = encrypt_password(arrAuthp[i]);
	}

	var scuid = global.SAC = $c.cuid();
	var pconfig = $c.include(CPROXY_PATH, true);

	//--------end environment related

	//--------ssh related
	if (!CL.sshkey) {
		ssh_file = yield ssh_script();
	} else {
		if (CL.sshkey != "create") {
			ssh_file = CL.sshkey;
		}
	}
	//--------end ssh related

	//--------dir related
	var username = String(require('child_process').execSync("whoami", {encoding: 'utf8', timeout: 1000})).trim();
	var params = yield run(CREATE_DIR_SCRIPT + " \"/var\" \"" + username + "\""); // params [code,output,message]
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
	//--------end dir related

	//--------notifications
	var email = global.EMAIL = CL.email || (yield question('Email for notifications. (Enter): '));
	//--------end notifications

	//--------ssh copy/create
	if (ssh_file) {
		if (ssh_file != KEY_PATH + MASTER_KEY + ".pub") {
			yield run('cp ' + ssh_file + ' ' + KEY_PATH + MASTER_KEY + '.pub;cp ' + ssh_file.replace('.pub', '') + ' ' + KEY_PATH + MASTER_KEY + ';');
		}
	} else {
		var status = false;
		try {
			status = (yield fsstat(KEY_PATH + MASTER_KEY))[1];
			if (status) {
				console.log(KEY_PATH + MASTER_KEY + ' already exists.');
				var ow = yield question('Overwrite (y/n)? ');
				if (ow in yes) { run('rm ' + KEY_PATH + MASTER_KEY + '.pub;rm ' + KEY_PATH + MASTER_KEY ); }
			}
		} catch (e) { }
		yield run('ssh-keygen -t rsa -C "' + email + '" -N "" -f ' + KEY_PATH + MASTER_KEY + ';');
	}
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';chmod 600 ' + KEY_PATH + MASTER_KEY);
	//--------end ssh copy/create

	var buildnames = [];
	//--------git related
	//if (CL.gitaddress != 'skip' || $c.isNull(CL.gitaddress) && process.argv.length < 3........................) {
	if (CL.gitaddress != 'skip' || $c.isNull(CL.gitaddress)) {
		var skip = yield question('Let\'s create a project or enter \'skip\' to do this later: ');
		while (skip != 'skip' && !(skip in no)) {
			buildnames.push(yield git_script(
				CL.gitaddress,
				CL.name,
				fqdn,
				CL['use-webhook'],
				CL['sshkey-exists'],
				CL.gituser,
				CL.gitpassword,
				null,
				global.EMAIL));

			skip = (yield question('Add another project? (no): ')) || "no";
		}
	}
	//--------end git related

	//--------move app and start deploy service
	yield run("mkdir -p " + PROJECT_PATH + ";");
	yield run("mkdir -p " + LOG_PATH + ";");
	yield run("mkdir -p " + CONFIG_PATH + ";");
	yield run("cp -r " + __dirname.replace('bin','') + "* " + PROJECT_PATH);
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
	yield writeNodeConfig(sport,hport,scuid,email,env,fqdn);
	yield fswrite(APP_CONFIG, JSON.stringify(apps, null, 2));

	if (buildnames.length) {
		yield deploy_script(buildnames,sport,hport,authu,authp);
	}
	yield updateRoutes({domain:fqdn.replace(/https?:\/\/(.*?)(\/|\?|#|:|$).*/,'$1'),env:env,socket_port:sport,http_port:hport,username:authu,password:authp,cuid:scuid});
	yield run("nohup node " + NODE_PATH + "index.js " + sport + " " + hport + " '" + scuid + "' '" + authu + "' '" + authp + "' > " + LOG_PATH + "index.js.log 2>&1 &");
	//--------end move app and start deploy service

	console.log('Completed');
	rl.close();
	process.exit();
}
function* addApp () {
	if(!nodeconfig) { return console.log('Craydent Deploy must be initialized before you can add apps.'),process.exit(); }
	var bname = yield git_script(
		CL.gitaddress,
		CL.name,
		global.FQDN,
		CL['use-webhook'],
		CL['use-sshkey'],
		CL.gituser,
		CL.gitpassword,
		CL.sshkey,
		global.EMAIL);

	yield fswrite(APP_CONFIG, JSON.stringify(apps, null, 2));
	var appobj = $c.where(apps,{name:bname})[0];
	if (appobj) {
		var npath = BASE_PATH + "nodejs/" + bname;
		console.log('creating directory: ' + npath);
		yield run("mkdir -p " + npath + ";");
		console.log('copying git path ' + GIT_PATH + bname + "/" + (appobj.nodejs || "") + " to " + npath);
		yield run("cp -r " + GIT_PATH + bname + "/" + (appobj.nodejs || "") + "* " + npath + ";");
		console.log('building ' + bname);
		yield run(DEPLOY_SCRIPT + " \"" + bname + "\" \"build\" " + " " + (appobj.www || "''") +
			" " + (appobj.nodejs || "''") +
			" " + (appobj.webdir || "''") +
			" '" + appobj.servers.join(" ") + "'" +
			" '" + (global.ENV || "prod") + "'" + ";");

		var pconfig = $c.include(CPROXY_PATH,true);
		if (pconfig) {
			var p = $c.include(GIT_PATH + bname + '/package.json');
			p = JSON.parseAdvanced(p,null,null,GIT_PATH + bname);

			var routes = $c.getProperty(p, 'cproxy.routes');
			if (routes) {
				console.log('adding proxy routes');
				for (var domain in routes) {
					if (!routes.hasOwnProperty(domain)) { continue; }
					pconfig.routes[domain] = pconfig.routes[domain] || [];
					$c.upsert(pconfig.routes[domain], routes[domain], "name");
				}
				yield fswrite(CPROXY_PATH, JSON.stringifyAdvanced(pconfig, null, 2));
			}
		}
	}
	console.log('Completed');
	process.exit();
}
function* removeApp (action) {
	if(!nodeconfig) { return console.log('Craydent Deploy must be initialized before you can remove apps.'),process.exit(); }

	var projects = yield _prepare(action), arr = [];
	var answer = yield question('Are you sure you want to remove '+(projects.length > 1 ? "theses " + projects.length + " projects" : "this project")+' and all of its files?  This action can not be undone (type \'delete\' to confirm): ');
	if (answer != "delete") {
		console.log("Remove cancelled");
		return process.exit();
	}
	for (var i = 0, len = projects.length; i < len; i++) {
		var appobj = projects[i];
		//if (appobj.name == "craydent-deploy" && CL.name != "craydent-deploy") { continue; }
		yield run(DEPLOY_SCRIPT + " \"" + appobj.name + "\" \"backup\" " + " " + (appobj.www || "''") +
			" " + (appobj.nodejs || "''") +
			" " + (appobj.webdir || "''") +
			" '" + appobj.servers.join(" ") + "'" +
			" '" + (global.ENV || "prod") + "'" + ";");
		yield run(DEPLOY_SCRIPT + " \"" + appobj.name + "\" \"stop\" " + " " + (appobj.www || "''") +
			" " + (appobj.nodejs || "''") +
			" " + (appobj.webdir || "''") +
			" '" + appobj.servers.join(" ") + "'" +
			" '" + (global.ENV || "prod") + "'" + ";");
		var pkg = $c.include(GIT_PATH + appobj.name + '/package.json');
		if (pkg) {
			console.log('removing proxy routes');
			pkg = JSON.parseAdvanced(pkg,null,null,GIT_PATH + appobj.name);
			var routes = $c.getProperty(pkg, 'cproxy.routes');
			if (routes) { arr.push(removeRoutes(routes)); }
		}
		arr.push(run(DELETE_SCRIPT + " \"" + appobj.name + "\""));

	}
	yield fswrite(APP_CONFIG, JSON.stringify(apps, null, 2));
	yield $c.parallelEach(arr);
	console.log('Completed');
	process.exit();
}
function* addUser () {
	if(!nodeconfig) { return console.log('Craydent Deploy must be initialized before you can add users.'),process.exit(); }
	var auth = global.HTTP_AUTH;
	if (auth[CL.user]) { return console.log("user already exists."), process.exit(); }

	auth[CL.user] = {
		"access": (CL.access || "").split(','),
		"password": encrypt_password(CL.password)
	};
	yield writeNodeConfig();

	console.log('Completed');
	process.exit();
}
function* removeUser () {
	if(!nodeconfig) { return console.log('Craydent Deploy must be initialized before you can remove users.'),process.exit(); }
	var auth = global.HTTP_AUTH;
	if (!auth[CL.user]) { return console.log("user does not exist."),process.exit(); }

	delete auth[CL.user];
	yield writeNodeConfig();

	console.log('Completed');
	process.exit();
}
function* updateUser () {
	if(!nodeconfig) { return console.log('Craydent Deploy must be initialized before you can update users.'),process.exit(); }
	var auth = global.HTTP_AUTH;
	if (!auth[CL.user]) { return console.log("user does not exist."), process.exit(); }

	auth[CL.user].password = encrypt_password(CL.password);
	auth[CL.user].access = (CL.access ? CL.access.split(',') : auth[CL.user].access) || [];
	yield writeNodeConfig();

	console.log('Completed');
	process.exit();
}
function* appCommands (action) {
	if(!nodeconfig) { return console.log('Craydent Deploy must be initialized before you can run ' + action + ' on an app.'),process.exit(); }

	var projects = yield _prepare(action),arr = [];
	for (var i = 0, len = projects.length; i < len; i++) {
		var appobj = projects[i];
		arr.push(run(DEPLOY_SCRIPT + " \"" + appobj.name + "\" \"" + action + "\" " + " " + (appobj.www || "''") +
			" " + (appobj.nodejs || "''") +
			" " + (appobj.webdir || "''") +
			" '" + appobj.servers.join(" ") + "'" +
			" '" + (global.ENV || "prod") + "'" + ";"));
	}
	yield $c.parallelEach(arr);

	console.log('Completed');
	process.exit();
}
function _prepare (action) {
	return $c.syncroit(function*(){
		var project = CL.name || (yield question('What project do you want to ' + action + '? (type \'all\' to perform on all projects): '));
		while (!project) {
			project = (yield question('What project do you want to ' + action + '? (type \'all\' to perform on all projects): '));
		}

		var projects = $c.delete(apps, {name: project});
		if (project == "all") {
			projects = $c.delete(apps,{name:{"$ne":"craydent-deploy"}},false);
		}
		if (!projects.length) {
			if (project == "all") { return console.log("There are no projects being tracked."),process.exit(); }
			return console.log("Can not find " + project + "."),process.exit();
		}
		return projects
	});
}
function deploy_script (buildnames, sport, hport, authu, authp) {
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH,true);
		for (var i = 0, len = buildnames.length; i < len; i++) {
			var buildname = buildnames[i];
			var p = $c.include(GIT_PATH + buildname + '/package.json');
			var server = p.main || "";
			yield run(PROJECT_PATH + 'shell_scripts/deploy_script.sh ' + buildname + ' pullrestart \'\' \'\' \'\' \'' + server + '\';');

			if (pconfig) {
				p = JSON.parseAdvanced(p,null,null,GIT_PATH + buildname);
				var routes = $c.getProperty(p, 'cproxy.routes') || {};
				for (var domain in routes) {
					if (!routes.hasOwnProperty(domain)) { continue; }
					pconfig.routes[domain] = pconfig.routes[domain] || [];
					$c.upsert(pconfig.routes[domain], routes[domain],"name");
				}
			}
		}
		if (pconfig) {
			var dconfig = $c.include(__dirname + '/../package.json') || {};
			var routes = $c.getProperty(dconfig, 'cproxy.routes') || {};
			for (var domain in routes) {
				if (!routes.hasOwnProperty(domain)) { continue; }
				pconfig.routes[domain] = pconfig.routes[domain] || [];
				$c.upsert(pconfig.routes[domain], routes[domain],"name");
			}
			yield fswrite(CPROXY_PATH, JSON.stringifyAdvanced(pconfig, null, 2));
		}
		yield run("nohup node " + NODE_PATH + "index.js " + sport + " " + hport + " '" + scuid + "' '" + authu + "' '" + authp + "' > " + LOG_PATH + "index.js.log 2>&1 &");
	});
}
function git_script(gitUrl, name, deploy_url, create_webhooks, create_deploy_key, gitUser, gitPassword, key_name, email) {
	var username =  String(require('child_process').execSync( "whoami", { encoding: 'utf8', timeout: 1000 } )).trim();
	key_name = key_name || MASTER_KEY;
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH,true);
		gitUrl = gitUrl || (yield question('What is the GitHub or BitBucket SSH url: '));
		var buildname = gitUrl.replace(/.*\/(.*)\.git/, '$1');
		buildname = name || (yield question('What do you want to call your project (' + buildname + '): ')) || buildname;
		var setupWebHooks = create_webhooks || (yield question('Set up Webhooks for continuous integration? (yes): ')) || "yes";
		var createDeployKey = create_deploy_key || (yield question('Do you want to add your ssh master key in Git? (yes): ')) || "yes";
		var url = "";
		if (setupWebHooks in yes || createDeployKey in yes) {
			url = deploy_url || (yield question('What URL will be running this instance of cdeploy? (ex: http://www.example.com:80): '));
		}
		var protocol = "http";

		var host, url_parts = gitUrl.match(/(.*):(.*)?\/(.*)\.git/);

		if ($c.startsWith(gitUrl, "http")) {
			url_parts = gitUrl.match(/https?:\/\/(?:.*?@)?(.*)?\/(.*)?\/(.*)?\.git.*/,"git@$1:$2/$3.git");
		}

		if ($c.startsWith(url, "http")) {
			var parts = url.split(':');
			protocol = parts[0] || protocol;
			global.HTTP_PORT = $c.strip(parts[2] || "", "/") || global.HTTP_PORT;
			host = $c.strip(parts[1], "/");
		}
		//var repo_owner = gitUrl.replace(/.*:(.*)?\/.*\.git/, '$1');
		//var project_name = gitUrl.replace(/.*:.*?\/(.*)\.git/, '$1');
		var repo_owner = url_parts[2];
		var project_name = url_parts[3];

		function loginRun(cb) {
			return $c.syncroit(function*() {
				gitUser = gitUser || (yield question('If you would like us to add the ssh to your git account, type your username (Enter): '));
				if (gitUser) {
					gitPassword = gitPassword || (yield hidden("Enter your password: "));
					yield cb();
				}
			});
		}

		if (createDeployKey in yes) {
			var cdk = function (){
				return $c.syncroit(function*() {
					var content = yield fsread(KEY_PATH + MASTER_KEY + ".pub", {encoding: 'utf8'});
					var results = yield git.createDeployKey({
						git_address: gitUrl,
						repo_owner: repo_owner,
						project_name: project_name,
						git_user: gitUser,
						git_password: gitPassword,
						key_name: key_name,
						content: content
					});
					if (!results) {
						console.log('Login Failed.');
						gitUser = "";
						gitPassword = "";
						return (yield loginRun(cdk));
					}
					return results;
				});
			};
			yield loginRun(cdk);
		}
		if (setupWebHooks in yes) {
			var cwh = function (){
				return $c.syncroit(function*() {
					var results = yield git.createWebhook({
						protocol: protocol,
						host: host,
						name: buildname,
						git_address: gitUrl,
						repo_owner: repo_owner,
						project_name: project_name,
						git_user: gitUser,
						git_password: gitPassword
					}, !!pconfig);
					if (!results) {
						console.log('Login Failed.');
						gitUser = "";
						gitPassword = "";
						return (yield loginRun(cwh));
					}
					return results;
				});
			};
			yield loginRun(cwh);
		}

		yield run("rm -rf " + GIT_PATH + buildname + ";");
		yield run("mkdir -p " + GIT_PATH + buildname + ";");
		yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
		yield run('ssh-agent bash -c "ssh-add ' + KEY_PATH + key_name + '; git clone ' + gitUrl + ' ' + GIT_PATH + buildname + '";');
		yield run('chown -R ' + username + ' ' + BASE_PATH + ';');


		var pkg = $c.include(GIT_PATH + buildname + "/package.json");
		var server = pkg.main || "index.js";

		apps.push({
			"name": buildname,
			"servers": [server],
			"logfile": [LOG_BASE_PATH + server + ".log"],
			"size": {},
			"fd": {},
			"www": "",
			"nodejs": "",
			"webdir": "",
			"email": email
		});
		return buildname;
	});
}
function ssh_script() {
	return $c.syncroit(function*() {
		var status, answer,ssh_file;
		try {
			status = (yield fsstat("~/.ssh/id_rsa.pub"))[1];
		} catch (e) { }
		if (status) { // ssh key found
			answer = (yield question('Found a ssh key "id_rsa.pub".  Do you want to use this? (yes): ')) || "yes";
			if (answer in yes) {
				return "~/.ssh/id_rsa.pub";
			}
		}
		// ssh key not found or said not to use the default ssh id_rsa
		try {
			status = (yield fsstat(ssh_file = KEY_PATH + "master_id_rsa.pub"))[1];
		} catch (e) { }
		if (status) { // ssh key found
			answer = (yield question('Found cdeploy ssh master key.  Do you want to use this? (yes): ')) || "yes";
			if (answer in yes) {
				return ssh_file;
			}
		}
		ssh_file = yield question('Enter to create a key or type the full path to the ssh key? (Enter): ');

		return ssh_file;

	});
}
function updateRoutes(values) {
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH, true);
		var dconfig;
		if (pconfig && (dconfig = $c.include(__dirname + '/../package.json'))) {
			console.log('adding/updating Craydent Proxy routes.');
			var routes = $c.getProperty(JSON.parseAdvanced(dconfig, null, values), 'cproxy.routes') || {};
			for (var domain in routes) {
				if (!routes.hasOwnProperty(domain)) { continue; }
				pconfig.routes[domain] = pconfig.routes[domain] || [];
				$c.upsert(pconfig.routes[domain], routes[domain], "name");
			}
			yield fswrite(CPROXY_PATH, JSON.stringifyAdvanced(pconfig, null, 2));
		}
	});
}
function removeRoutes(routes) {
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH,true);
		if (pconfig) {
			for (var domain in routes) {
				if (!routes.hasOwnProperty(domain) || !pconfig.routes[domain]) { continue; }
				var mappings = routes[domain];
				for (var i = 0, len = mappings.length; i < len; i++) {
					var index = $c.indexOfAlt(pconfig.routes[domain], mappings[i], function(item, val){
						return item.name == val.name;
					});
					if (~index) { $c.removeAt(pconfig.routes[domain], index); }
				}
				if (!pconfig.routes[domain].length) {
					delete pconfig.routes[domain];
				}
			}
			yield fswrite(CPROXY_PATH, JSON.stringifyAdvanced(pconfig, null, 2));
		}
	});
}
function hidden(query) {
	return new Promise(function(res) {
		var fn = function (char) {
			char = char + "";
			switch (char) {
				case "\n":
				case "\r":
				case "\u0004":
					rl.pause();
					break;
				default:
					process.stdout.write("\033[2K\033[200D" + query + Array(rl.line.length + 1).join("*"));
					break;
			}
		};
		process.stdin.on("data", fn);

		rl.question(query, function (value) {
			rl.history = rl.history.slice(1);
			res(value);
			process.stdin.removeListener("data",fn);
		});
	});
}