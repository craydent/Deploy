#!/usr/bin/env node
require('craydent/noConflict');
require('shelljs/global');
const readline = require('readline');
const fs = require('fs');
const git = require('../node/git_actions');

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
$c.syncroit(function*(){
	var question = $c.yieldable(rl.question, rl),
		passwordinput = $c.yieldable(hidden),
		status, answer, ssh_file,
		yes = {yes:1,y:1},
		key_name = "master_id_rsa";

	//--------ssh related
	try { status = fs.statSync("~/.ssh/id_rsa.pub"); } catch(e) { }
	if (status) { // ssh key found
		answer = yield question('Found a ssh key "id_rsa.pub".  Do you want to use this? (yes): ');
		if (answer in yes) {
			ssh_file = "~/.ssh/id_rsa.pub";
		}
	} else { // ssh key not found
		ssh_file = yield question('Enter to create a key or type the full path to the ssh key? (Enter): ');
	}
	//--------end ssh related

	//--------dir related
	var run = $c.yieldable(exec);
	var username =  String(require('child_process').execSync( "whoami", { encoding: 'utf8', timeout: 1000 } )).trim();
	var params = yield run("../shell_scripts/create_dirs.sh \"/var\" \"" + username + "\""); // params [code,output,message]
	//--------end dir related

	//--------ssh copy/create
	if (ssh_file) { run('cp ' + ssh_file + ' /var/craydentdeploy/key/'+key_name+';'); }
	else { run('ssh-keygen -t rsa -C "$email" -N "" -f /var/craydentdeploy/key/'+key_name+';'); }
	var content = fs.readFileSync("/var/craydentdeploy/key/"+key_name,{encoding:'utf8'});
	run('sudo chown -R ' + username + ' /var/craydentdeploy/');
	//--------end ssh copy/create

	//--------notifications
	var email = yield question('Email for notifications. (Enter): ');
	//--------end notifications

	//--------git related
	var skip = yield question('Let\'s create a project or type \'skip\' to do this later: ');
	if (!skip) {
		var gitUrl = yield question('What is the GitHub or BitBucket SSH url: ');
		var setupWebHooks = yield question('Set up Webhooks for continuous integration? (yes): ');
		var createDeployKey = yield question('Is your ssh key already registered as a deploy key in Git? (yes): ');

		var repo_owner = gitUrl.replace(/.*:(.*)?\/.*\.git/,'$1');
		var project_name = gitUrl.replace(/.*:.*?\/(.*)\.git/,'$1');
		if (!(createDeployKey in yes)) {
			var gitUser = yield question('If you would like us to add the ssh to your git account, type your username (Enter): ');
			if (gitUser) {
				var gitPassword = yield hidden("Enter your password: ");
				//git@bitbucket.org:craydent/craydent-proxy.git  git@github.com:hartclark/t-bone.git
				git.createDeployKey({
					git_address:gitUrl,
					repo_owner:repo_owner,
					project_name:project_name,
					git_user:gitUser,
					git_password:gitPassword,
					key_name:key_name,
					content:content
				});
			}

		}
		setupWebHooks && git.createWebhook({
			protocol:"",
			host:"",
			name:"",
			git_address:gitUrl,
			repo_owner:"",
			project_name:"",
			git_user:gitUser,
			git_password:gitPassword
		});
	}
	//--------end git related

	//--------
	
	//--------end


	rl.close();
});
function hidden(query) {
	return new Promise(function(res) {
		var stdin = process.openStdin();
		process.stdin.on("data", function (char) {
			char = char + "";
			switch (char) {
				case "\n":
				case "\r":
				case "\u0004":
					stdin.pause();
					break;
				default:
					process.stdout.write("\033[2K\033[200D" + query + Array(rl.line.length + 1).join("*"));
					break;
			}
		});

		rl.question(query, function (value) {
			rl.history = rl.history.slice(1);
			res(value);
		});
	});
}