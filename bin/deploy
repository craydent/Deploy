#!/usr/bin/env node
/*/---------------------------------------------------------/*/
/*/ Craydent LLC deploy-v0.1.23                             /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
/* deploy_server params
 1=>interpreter/deploy command (not used)
 2=>env tier
 3=>socket port
 4=>http port
 5=>http auth username
 6=>http auth password
 7=>ssh key location or 'create'
 8=>email
 9=>git url
 10=>project name
 11=>yes/no to add webhooks
 12=>yes/no if the ssh key is already registered in git
 13=>the domain pointing to this server
 14=>git username
 15=>git password

 */
require('craydent/noConflict');
require('shelljs/global');
const readline = require('readline');
const fs = require('fs');
const git = require('../node/git_actions');
const BASE_PATH = "/var/craydentdeploy/";
const NODE_PATH = BASE_PATH + "nodejs/craydent-deploy/node/";
const PROJECT_PATH = BASE_PATH + "nodejs/craydent-deploy/";
const GIT_PATH = BASE_PATH + "git/";
const LOG_BASE_PATH = BASE_PATH + "log/";
const LOG_PATH = LOG_BASE_PATH + "craydent-deploy/";
const KEY_PATH = BASE_PATH + "key/";

const yes = {yes: 1, y: 1};
const no = {no: 1, n: 1};

var apps = [{
	"name": "craydent-deploy",
	"servers": ["deploy_server.js"],
	"logfile": [LOG_PATH + "deploy_server.log"],
	"size":{},
	"fd":{},
	"www": "",
	"nodejs":"node",
	"webdir":"",
	"email":""
}];

var indexOffset = 1;
if ((process.argv[1]||"").indexOf("cdeploy") == -1) {
	indexOffset += 1;
}

var run = $c.yieldable(exec);

if($c.include(NODE_PATH + 'nodeconfig')) {
	return $c.syncroit(function*(){
		yield run(__dirname + "/../shell_scripts/node_script.sh \"craydent-deploy\" \"deploy_server.js\" \"node/\";");
		process.exit();
	});
}

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
$c.syncroit(function*(){
	var question = $c.yieldable(rl.question, rl),
		fsstat = $c.yieldable(fs.stat, fs),
		fswrite = $c.yieldable(fs.writeFile, fs),
		fsread = $c.yieldable(fs.readFile, fs),
		status, answer, ssh_file,
		yes = {yes:1,y:1},
		no = {no:1,n:1},
		key_name = "master_id_rsa";

	//--------environment related
	var env = global.ENV = process.argv[1 + indexOffset] || (yield question('What tier/environment is this server? (PROD): ')) || "PROD";
	var sport = global.SOCKET_PORT = process.argv[2 + indexOffset] || (yield question('What socket port do you want to use? (4900): ')) || 4900;
	var hport = global.HTTP_PORT = process.argv[3 + indexOffset] || (yield question('What server port do you want to use? (4800): ')) || 4800;
	var authu = global.HTTP_AUTH_USERNAME = process.argv[4 + indexOffset] || (yield question('What HTTP Auth username do you want to use? (admin): ')) || 'admin';
	var authp = global.HTTP_AUTH_PASSWORD = process.argv[5 + indexOffset] || (yield question('What HTTP Auth password do you want to use? (admin): ')) || 'admin';
	var scuid = global.SAC = $c.cuid();
	var cproxy_path = '/usr/local/lib/node_modules/@craydent/craydent-proxy/pconfig.json';
	var pconfig = $c.include(cproxy_path) || $c.include(cproxy_path = '/usr/local/lib/node_modules/craydent-proxy/pconfig.json');

	//--------end environment related

	//--------ssh related
	if (!process.argv[6 + indexOffset]) {
		try {
			status = (yield fsstat("~/.ssh/id_rsa.pub"))[1];
		} catch (e) { }
		if (status) { // ssh key found
			answer = yield question('Found a ssh key "id_rsa.pub".  Do you want to use this? (yes): ');
			if (answer in yes) {
				ssh_file = "~/.ssh/id_rsa.pub";
			}
		} else { // ssh key not found
			ssh_file = yield question('Enter to create a key or type the full path to the ssh key? (Enter): ');
		}
	} else {
		if (process.argv[6 + indexOffset] != "create") {
			ssh_file = process.argv[6 + indexOffset];
		}
	}
	//--------end ssh related

	//--------dir related
	var username =  String(require('child_process').execSync( "whoami", { encoding: 'utf8', timeout: 1000 } )).trim();
	var params = yield run(__dirname + "/../shell_scripts/create_dirs.sh \"/var\" \"" + username + "\""); // params [code,output,message]
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
	//--------end dir related

	//--------notifications
	var email = global.EMAIL = process.argv[7 + indexOffset] || (yield question('Email for notifications. (Enter): '));
	//--------end notifications

	//--------ssh copy/create
	if (ssh_file) { yield run('cp ' + ssh_file + ' ' + KEY_PATH + key_name+';'); }
	else { yield run('ssh-keygen -t rsa -C "' + email + '" -N "" -f ' + KEY_PATH + key_name + ';'); }
	var content = yield fsread(KEY_PATH + key_name + ".pub",{encoding:'utf8'});
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';chmod 644 ' + KEY_PATH + key_name + ".pub");
	//--------end ssh copy/create

	var buildnames = [];
	//--------git related
	if (process.argv[8 + indexOffset] || $c.isNull(process.argv[8 + indexOffset]) && process.argv.length < 2 + indexOffset) {
		var skip = yield question('Let\'s create a project or enter \'skip\' to do this later: ');
		while (skip != 'skip' && !(skip in no)) {
			var gitUrl = process.argv[8 + indexOffset] || (yield question('What is the GitHub or BitBucket SSH url: '));
			var buildname = gitUrl.replace(/.*\/(.*)\.git/, '$1');
			buildname = process.argv[9 + indexOffset] || (yield question('What do you want to call your project (' + buildname + '): ')) || buildname;
			buildnames.push(buildname);
			var setupWebHooks = process.argv[10 + indexOffset] || (yield question('Set up Webhooks for continuous integration? (yes): ')) || "yes";
			var createDeployKey = process.argv[11 + indexOffset] || (yield question('Is your ssh key already registered as a deploy key in Git? (no): ')) || "no";
			var url = process.argv[12 + indexOffset] || (yield question('What URL will be running this instance of cdeploy? (ex: http://www.example.com:80): '));
			var protocol = "http";

			var host;

			if ($c.startsWith(url, "http")) {
				var parts = url.split(':');
				protocol = parts[0] || protocol;
				global.HTTP_PORT = $c.strip(parts[2], "/") || global.HTTP_PORT;
				host = $c.strip(parts[1], "/");
			}

			var repo_owner = gitUrl.replace(/.*:(.*)?\/.*\.git/, '$1');
			var project_name = gitUrl.replace(/.*:.*?\/(.*)\.git/, '$1');
			if (createDeployKey in no) {
				var gitUser = process.argv[13 + indexOffset] || (yield question('If you would like us to add the ssh to your git account, type your username (Enter): '));
				if (gitUser) {
					var gitPassword = process.argv[14 + indexOffset] || (yield hidden("Enter your password: "));
					yield git.createDeployKey({
						git_address: gitUrl,
						repo_owner: repo_owner,
						project_name: project_name,
						git_user: gitUser,
						git_password: gitPassword,
						key_name: key_name,
						content: content
					});
				}

			}
			setupWebHooks && (yield git.createWebhook({
				protocol: protocol,
				host: host,
				name: buildname,
				git_address: gitUrl,
				repo_owner: repo_owner,
				project_name: project_name,
				git_user: gitUser,
				git_password: gitPassword
			},!!pconfig));

			yield run("rm -rf " + GIT_PATH + buildname + ";");
			yield run("mkdir -p " + GIT_PATH + buildname + ";");
			yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
			yield run('ssh-agent bash -c "ssh-add ' + KEY_PATH + key_name + '; git clone ' + gitUrl + ' ' + GIT_PATH + buildname + '";');
			yield run('chown -R ' + username + ' ' + BASE_PATH + ';');


			var pkg = $c.include(GIT_PATH + buildname + "/package.json");
			var server = pkg.main || "index.js";

			apps.push({
				"name": buildname,
				"servers": [server],
				"logfile": [LOG_BASE_PATH + +buildname + server + ".log"],
				"size": {},
				"fd": {},
				"www": "",
				"nodejs": "",
				"webdir": "",
				"email": email
			});
			skip = (yield question('Add another project? (no): ')) || "no";
		}
	}
	//--------end git related

	//--------move app and start deploy service
	var ncontent = "global.SOCKET_PORT = " + sport +
		";\nglobal.HTTP_PORT = " + hport +
		";\nglobal.SAC = '" + scuid + "';" +
		"\nglobal.HTTP_AUTH_USERNAME = '" + (authu || "admin") + "';" +
		"\nglobal.HTTP_AUTH_PASSWORD = '" + (authp || "admin") + "';" +
		"\nglobal.EMAIL = '" + (email || "" ) + "';" +
		"\nglobal.ENV = '" + (env || "prod") + "';";

	yield run("mkdir -p " + PROJECT_PATH + ";");
	yield run("mkdir -p " + LOG_PATH + ";");
	yield run("cp -r " + __dirname.replace('bin','') + "* " + PROJECT_PATH);
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
	yield run("echo \"" + ncontent + "\" > " + NODE_PATH + "nodeconfig.js;");
	yield run("echo \"" + $c.replace_all(JSON.stringify(apps),'"','\\""') + "\" > " + NODE_PATH + "craydent_deploy_config.json;");

	if (buildnames.length) {
		for (var i = 0, len = buildnames.length; i < len; i++) {
			var buildname = buildnames[i];
			var p = $c.include(GIT_PATH + buildname + '/package.json');
			var server = p.main || "";
			yield run(PROJECT_PATH + 'shell_scripts/deploy_script.sh ' + buildname + ' pullrestart \'\' \'\' \'\' \'' + server + '\';');

			if (pconfig) {
				p = JSON.parseAdvanced(p);
				var routes = $c.getProperty(p, 'cproxy.routes') || {};
				pconfig.routes = $c.merge(pconfig.routes, routes);
			}
		}
	}
	if (pconfig) {
		var dconfig = $c.include(__dirname + '/../package.json') || {};
		pconfig.routes = $c.merge(pconfig.routes, $c.getProperty(dconfig, 'cproxy.routes') || {});
		fswrite(cproxy_path, JSON.stringify(pconfig, null, 2));
	}
	yield run("nohup node " + NODE_PATH + "deploy_server.js " + sport + " " + hport + " '" + scuid + "' '" + authu + "' '" + authp + "' > " + LOG_PATH + "deploy_server.js.log 2>&1 &");
	//--------end move app and start deploy service

	console.log('Completed');
	rl.close();
	process.exit();
});
function hidden(query) {
	return new Promise(function(res) {
		process.stdin.on("data", function (char) {
			char = char + "";
			switch (char) {
				case "\n":
				case "\r":
				case "\u0004":
					rl.pause();
					break;
				default:
					process.stdout.write("\033[2K\033[200D" + query + Array(rl.line.length + 1).join("*"));
					break;
			}
		});

		rl.question(query, function (value) {
			rl.history = rl.history.slice(1);
			res(value);
		});
	});
}