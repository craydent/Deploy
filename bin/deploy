#!/usr/bin/env node
/*/---------------------------------------------------------/*/
/*/ Craydent LLC deploy-v0.1.6                              /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
require('craydent/noConflict');
const readline = require('readline');
const fs = require('fs');
const git = require('../node/git_actions');

var run = $c.yieldable(exec);

if($c.include('../node/nodeconfig')) {
	return $c.syncroit(function*(){
		yield run(__dirname + "/../shell_scripts/node_script.sh \"deploy\" \"deploy_server.js\" \"node\");");
	});
}

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
$c.syncroit(function*(){
	var question = $c.yieldable(rl.question, rl),
		status, answer, ssh_file,
		yes = {yes:1,y:1},
		no = {no:1,n:1},
		key_name = "master_id_rsa";

	//--------environment related
	var sport = global.SOCKET_PORT = (yield question('What socket port do you want to use? (4900): ')) || 4900;
	var hport = global.HTTP_PORT = (yield question('What server port do you want to use? (4800): ')) || 4800;
	var authu = global.HTTP_AUTH_USERNAME = (yield question('What HTTP Auth username do you want to use? (admin): ')) || 'admin';
	var authp = global.HTTP_AUTH_PASSWORD = (yield question('What HTTP Auth password do you want to use? (admin): ')) || 'admin';
	var scuid = global.SAC = $c.cuid();
	//--------end environment related

	//--------ssh related
	try { status = fs.statSync("~/.ssh/id_rsa.pub"); } catch(e) { }
	if (status) { // ssh key found
		answer = yield question('Found a ssh key "id_rsa.pub".  Do you want to use this? (yes): ');
		if (answer in yes) {
			ssh_file = "~/.ssh/id_rsa.pub";
		}
	} else { // ssh key not found
		ssh_file = yield question('Enter to create a key or type the full path to the ssh key? (Enter): ');
	}
	//--------end ssh related

	//--------dir related
	var username =  String(require('child_process').execSync( "whoami", { encoding: 'utf8', timeout: 1000 } )).trim();
	var params = yield run(__dirname + "/../shell_scripts/create_dirs.sh \"/var\" \"" + username + "\""); // params [code,output,message]
	yield run('sudo chown -R '+username+' /var/craydentdeploy/;');
	//--------end dir related

	//--------ssh copy/create
	if (ssh_file) { yield run('cp ' + ssh_file + ' /var/craydentdeploy/key/'+key_name+';'); }
	else { yield run('ssh-keygen -t rsa -C "$email" -N "" -f /var/craydentdeploy/key/'+key_name+';'); }
	var content = fs.readFileSync("/var/craydentdeploy/key/"+key_name + ".pub",{encoding:'utf8'});
	yield run('sudo chown -R ' + username + ' /var/craydentdeploy/');
	//--------end ssh copy/create

	//--------notifications
	var email = yield question('Email for notifications. (Enter): ');
	//--------end notifications

	//--------git related
	var skip = yield question('Let\'s create a project or enter \'skip\' to do this later: ');
	if (!skip) {
		var gitUrl = yield question('What is the GitHub or BitBucket SSH url: ');
		var buildname = gitUrl.replace(/.*\/(.*)\.git/,'$1');
			buildname = (yield question('What do you want to call your project ('+buildname+'): ')) || buildname;
		var setupWebHooks = (yield question('Set up Webhooks for continuous integration? (yes): ')) || "yes";
		var createDeployKey = (yield question('Is your ssh key already registered as a deploy key in Git? (no): ')) || "no";
		var url = yield question('What URL will be running this instance of cdeploy? (ex: http://www.example.com:80): ');
		var protocol = "http";
		global.HTTP_PORT = 4800;
		var host;

		if ($c.startsWith(url,"http")) {
			var parts = url.split(':');
			protocol = parts[0] || protocol;
			global.HTTP_PORT = $c.strip(parts[2],"/") || global.HTTP_PORT;
			host = $c.strip(parts[1],"/");
		}

		var repo_owner = gitUrl.replace(/.*:(.*)?\/.*\.git/,'$1');
		var project_name = gitUrl.replace(/.*:.*?\/(.*)\.git/,'$1');
		if (!(createDeployKey in yes)) {
			var gitUser = yield question('If you would like us to add the ssh to your git account, type your username (Enter): ');
			if (gitUser) {
				var gitPassword = yield hidden("Enter your password: ");
				//git@bitbucket.org:craydent/craydent-proxy.git  git@github.com:hartclark/t-bone.git
				yield git.createDeployKey({
					git_address:gitUrl,
					repo_owner:repo_owner,
					project_name:project_name,
					git_user:gitUser,
					git_password:gitPassword,
					key_name:key_name,
					content:content
				});
			}

		}
		setupWebHooks && (yield git.createWebhook({
			protocol:protocol,
			host:host,
			name:buildname,
			git_address:gitUrl,
			repo_owner:repo_owner,
			project_name:project_name,
			git_user:gitUser,
			git_password:gitPassword
		}));
	}
	//--------end git related

	//--------move app and start deploy service
	yield run("mkdir -p /var/craydentdeploy/nodejs/deploy;mkdir -p /var/craydentdeploy/log/deploy;cp " + __dirname + "/../ /var/craydentdeploy/nodejs/deploy");
	yield run("nohup node /var/craydentdeploy/nodejs/deploy/node/deploy_server.js " + sport + " " + hport + " " + sac + " > /var/craydentdeploy/log/deploy/deploy_server.js.log");
	//--------end move app and start deploy service


	rl.close();
});
function hidden(query) {
	return new Promise(function(res) {
		var stdin = process.openStdin();
		process.stdin.on("data", function (char) {
			char = char + "";
			switch (char) {
				case "\n":
				case "\r":
				case "\u0004":
					stdin.pause();
					break;
				default:
					process.stdout.write("\033[2K\033[200D" + query + Array(rl.line.length + 1).join("*"));
					break;
			}
		});

		rl.question(query, function (value) {
			rl.history = rl.history.slice(1);
			res(value);
		});
	});
}