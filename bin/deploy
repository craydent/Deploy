#!/usr/bin/env node
/*/---------------------------------------------------------/*/
/*/ Craydent LLC deploy-v0.2.1                              /*/
/*/ Copyright 2011 (http://craydent.com/about)              /*/
/*/ Dual licensed under the MIT or GPL Version 2 licenses.  /*/
/*/ (http://craydent.com/license)                           /*/
/*/---------------------------------------------------------/*/
/*/---------------------------------------------------------/*/
/* deploy_server params
 1=>interpreter/deploy command (not used)
 2=>env tier
 3=>socket port
 4=>http port
 5=>http auth username
 6=>http auth password
 7=>ssh key location or 'create'
 8=>email
 9=>git url
 10=>project name
 11=>yes/no to add webhooks
 12=>yes/no if the ssh key is already registered in git
 13=>the domain pointing to this server
 14=>git username
 15=>git password


actionable commands after initialization
 1=>interpreter/deploy command (not used)
 2=>command
 	add
 		(3=>git address[ssh url])
 		(4=>project name[default:git repo name])
		(5=>create_webhooks[yes,no])
		(6=>create_deploy_key[yes,no])
		(7=>git username)
 		(8=>git password)
		(9=>ssh key name[default:master__id_rsa])
 	restart
		(3=>project name)
    backup
 		(3=>project name)
	build
 		(3=>project name)
 	npminstall
 		(3=>project name)
 	pull
 		(3=>project name)
 	pullrestart
 		(3=>project name)
 	pullsync
 		(3=>project name)
 	restart
 		(3=>project name)
 	start
 		(3=>project name)
 	stop
 		(3=>project name)
 	sync
 		(3=>project name)

 */
var $c = require('craydent/noConflict');
require('shelljs/global');
const readline = require('readline');
const fs = require('fs');
const git = require('../node/git_actions');
const BASE_PATH = "/var/craydentdeploy/";
const CONFIG_PATH = BASE_PATH + "config/craydent-deploy/";
const NODE_PATH = BASE_PATH + "nodejs/craydent-deploy/node/";
const PROJECT_PATH = BASE_PATH + "nodejs/craydent-deploy/";
const GIT_PATH = BASE_PATH + "git/";
const LOG_BASE_PATH = BASE_PATH + "log/";
const LOG_PATH = LOG_BASE_PATH + "craydent-deploy/";
const KEY_PATH = BASE_PATH + "key/";
const CPROXY_PATH = '/var/craydentdeploy/config/craydent-proxy/pconfig.json';
const MASTER_KEY = 'master_id_rsa';

const yes = {yes: 1, y: 1};
const no = {no: 1, n: 1};

var apps = [{
	"name": "craydent-deploy",
	"servers": ["deploy_server.js"],
	"logfile": [LOG_PATH + "deploy_server.log"],
	"size":{},
	"fd":{},
	"www": "",
	"nodejs":"node",
	"webdir":"",
	"email":""
}];

var indexOffset = 1;
if (!~(process.argv[1]||"").indexOf("cdeploy")) { // doesn't contain cdeploy
	indexOffset += 1;
}

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});
const run = $c.yieldable(exec);
const question = $c.yieldable(rl.question, rl);
const fsstat = $c.yieldable(fs.stat, fs);
const fswrite = $c.yieldable(fs.writeFile, fs);
const fsread = $c.yieldable(fs.readFile, fs);

if($c.include(CONFIG_PATH + 'nodeconfig')) {
	return $c.syncroit(function*(){
		var action = process.argv[1 + indexOffset];
		if (!action) { // no action
			yield run(__dirname + "/../shell_scripts/node_script.sh \"craydent-deploy\" \"deploy_server.js\" \"node/\";");
		} else {
			var cconfig = $c.include(CONFIG_PATH + "craydent_deploy_config.json");
			var project =  process.argv[2 + indexOffset] || (yield question('What project do you want to ' + action + '? (type \'all\' to perform on all projects): '));

			while (!project) { project =  (yield question('What project do you want to ' + action + '? (type \'all\' to perform on all projects): ')); }

			var projects = $c.where(cconfig,{name: project});
			if (project == "all") {
				projects = cconfig;
			}
			if (action == "add") {
				yield git_script(
					project,
					process.argv[3 + indexOffset],
					global.FQDN,
					process.argv[4 + indexOffset],
					process.argv[5 + indexOffset],
					process.argv[6 + indexOffset],
					process.argv[7 + indexOffset],
					process.argv[8 + indexOffset]);
				yield run("echo \"" + $c.replace_all(JSON.stringify(apps),'"','\\""') + "\" > " + CONFIG_PATH + "craydent_deploy_config.json;");

			} else {
				var arr = [];
				for (var i = 0, len = projects.length; i < len; i++) {
					var appobj = projects[i];
					arr.push(run(__dirname + "/../shell_scripts/deploy_script.sh \"" + appobj.name + "\" \"" + action + "\" " + " " + (appobj.www || "''") +
						" " + (appobj.nodejs || "''") +
						" " + (appobj.webdir || "''") +
						" '" + appobj.servers.join(" ") + "'" +
						" '" + (global.ENV || "prod") + "'" + ";"));
				}
				yield $c.parallelEach(arr);
			}
			console.log('Completed');
		}
		process.exit();
	});
}

function deploy_script (buildnames, sport, hport, authu, authp) {
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH);
		for (var i = 0, len = buildnames.length; i < len; i++) {
			var buildname = buildnames[i];
			var p = $c.include(GIT_PATH + buildname + '/package.json');
			var server = p.main || "";
			yield run(PROJECT_PATH + 'shell_scripts/deploy_script.sh ' + buildname + ' pullrestart \'\' \'\' \'\' \'' + server + '\';');

			if (pconfig) {
				p = JSON.parseAdvanced(p);
				var routes = $c.getProperty(p, 'cproxy.routes') || {};
				pconfig.routes = $c.merge(pconfig.routes, routes);
			}
		}
		if (pconfig) {
			var dconfig = $c.include(__dirname + '/../package.json') || {};
			pconfig.routes = $c.merge(pconfig.routes, $c.getProperty(dconfig, 'cproxy.routes') || {});
			yield fswrite(CPROXY_PATH, JSON.stringify(pconfig, null, 2));
		}
		yield run("nohup node " + NODE_PATH + "deploy_server.js " + sport + " " + hport + " '" + scuid + "' '" + authu + "' '" + authp + "' > " + LOG_PATH + "deploy_server.js.log 2>&1 &");
	});
}
function git_script(gitUrl, name, deploy_url, create_webhooks, create_deploy_key, gitUser, gitPassword, key_name) {
	key_name = key_name || MASTER_KEY;
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH);
		gitUrl = gitUrl || (yield question('What is the GitHub or BitBucket SSH url: '));
		var buildname = gitUrl.replace(/.*\/(.*)\.git/, '$1');
		buildname = name || (yield question('What do you want to call your project (' + buildname + '): ')) || buildname;
		var setupWebHooks = create_webhooks || (yield question('Set up Webhooks for continuous integration? (yes): ')) || "yes";
		var createDeployKey = create_deploy_key || (yield question('Do you want to add your ssh master key in Git? (yes): ')) || "yes";
		var url = "";
		if (setupWebHooks in yes || createDeployKey in yes) {
			url = deploy_url || (yield question('What URL will be running this instance of cdeploy? (ex: http://www.example.com:80): '));
		}
		var protocol = "http";

		var host, url_parts = gitUrl.match(/(.*):(.*)?\/(.*)\.git/);

		if ($c.startsWith(gitUrl, "http")) {
			url_parts = gitUrl.match(/https?:\/\/(?:.*?@)?(.*)?\/(.*)?\/(.*)?\.git.*/,"git@$1:$2/$3.git");
		}

		if ($c.startsWith(url, "http")) {
			var parts = url.split(':');
			protocol = parts[0] || protocol;
			global.HTTP_PORT = $c.strip(parts[2], "/") || global.HTTP_PORT;
			host = $c.strip(parts[1], "/");
		}
		//var repo_owner = gitUrl.replace(/.*:(.*)?\/.*\.git/, '$1');
		//var project_name = gitUrl.replace(/.*:.*?\/(.*)\.git/, '$1');
		var repo_owner = url_parts[2];
		var project_name = url_parts[3];
		if (createDeployKey in yes) {
			gitUser = gitUser || (yield question('If you would like us to add the ssh to your git account, type your username (Enter): '));
			if (gitUser) {
				gitPassword = gitPassword || (yield hidden("Enter your password: "));
				var results = yield git.createDeployKey({
					git_address: gitUrl,
					repo_owner: repo_owner,
					project_name: project_name,
					git_user: gitUser,
					git_password: gitPassword,
					key_name: key_name,
					content: content
				});
			}

		}
		if (setupWebHooks in yes) {
			var results = yield git.createWebhook({
				protocol: protocol,
				host: host,
				name: buildname,
				git_address: gitUrl,
				repo_owner: repo_owner,
				project_name: project_name,
				git_user: gitUser,
				git_password: gitPassword
			}, !!pconfig);
		}

		yield run("rm -rf " + GIT_PATH + buildname + ";");
		yield run("mkdir -p " + GIT_PATH + buildname + ";");
		yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
		yield run('ssh-agent bash -c "ssh-add ' + KEY_PATH + key_name + '; git clone ' + gitUrl + ' ' + GIT_PATH + buildname + '";');
		yield run('chown -R ' + username + ' ' + BASE_PATH + ';');


		var pkg = $c.include(GIT_PATH + buildname + "/package.json");
		var server = pkg.main || "index.js";

		apps.push({
			"name": buildname,
			"servers": [server],
			"logfile": [LOG_BASE_PATH + +buildname + server + ".log"],
			"size": {},
			"fd": {},
			"www": "",
			"nodejs": "",
			"webdir": "",
			"email": email
		});
		return buildname;
	});
}
function ssh_script() {
	return $c.syncroit(function*() {
		var status, answer,ssh_file;
		try {
			status = (yield fsstat("~/.ssh/id_rsa.pub"))[1];
		} catch (e) { }
		if (status) { // ssh key found
			answer = (yield question('Found a ssh key "id_rsa.pub".  Do you want to use this? (yes): ')) || "yes";
			if (answer in yes) {
				return "~/.ssh/id_rsa.pub";
			}
		}
		// ssh key not found or said not to use the default ssh id_rsa
		try {
			status = (yield fsstat(ssh_file = KEY_PATH + "master_id_rsa.pub"))[1];
		} catch (e) { }
		if (status) { // ssh key found
			answer = (yield question('Found deploy ssh master key.  Do you want to use this? (yes): ')) || "yes";
			if (answer in yes) {
				return ssh_file;
			}
		}
		ssh_file = yield question('Enter to create a key or type the full path to the ssh key? (Enter): ');

		return ssh_file;

	});
}
function updateRoutes() {
	return $c.syncroit(function*() {
		var pconfig = $c.include(CPROXY_PATH);
		var dconfig;
		if (pconfig && (dconfig = $c.include(__dirname + '/../package.json'))) {
			pconfig.routes = $c.merge(pconfig.routes, $c.getProperty(dconfig, 'cproxy.routes') || {});
			yield fswrite(CPROXY_PATH, JSON.stringify(pconfig, null, 2));
		}
	});
}
function writeNodeConfig(sport,hport,scuid,authu,authp,email,env,fqdn){
	return $c.syncroit(function*() {
		var ncontent = "global.SOCKET_PORT = " + sport +
			";\nglobal.HTTP_PORT = " + hport +
			";\nglobal.SAC = '" + scuid + "';" +
			"\nglobal.HTTP_AUTH_USERNAME = '" + (authu || "admin") + "';" +
			"\nglobal.HTTP_AUTH_PASSWORD = '" + (authp || "admin") + "';" +
			"\nglobal.EMAIL = '" + (email || "" ) + "';" +
			"\nglobal.ENV = '" + (env || "prod") + "';" +
			"\nglobal.FQDN = '" + (fqdn || "") + "';";
		return yield run("echo \"" + ncontent + "\" > " + CONFIG_PATH + "nodeconfig.js;");
	});
}
$c.syncroit(function*(){
	var ssh_file,
		yes = {yes:1,y:1},
		no = {no:1,n:1};

	//--------environment related
	var fqdn = global.FQDN = process.argv[12 + indexOffset] || (yield question('What URL will be running this instance of cdeploy? (ex: http://www.example.com:80): '));
	var env = global.ENV = process.argv[1 + indexOffset] || (yield question('What tier/environment is this server? (PROD): ')) || "PROD";
	var sport = global.SOCKET_PORT = process.argv[2 + indexOffset] || (yield question('What socket port do you want to use? (4900): ')) || 4900;
	var hport = global.HTTP_PORT = process.argv[3 + indexOffset] || (yield question('What server port do you want to use? (4800): ')) || 4800;
	var authu = global.HTTP_AUTH_USERNAME = process.argv[4 + indexOffset] || (yield question('What HTTP Auth username do you want to use? (admin): ')) || 'admin';
	var authp = global.HTTP_AUTH_PASSWORD = process.argv[5 + indexOffset] || (yield question('What HTTP Auth password do you want to use? (admin): ')) || 'admin';
	var scuid = global.SAC = $c.cuid();
	var pconfig = $c.include(CPROXY_PATH);

	//--------end environment related

	//--------ssh related
	if (!process.argv[6 + indexOffset]) {
		ssh_file = yield ssh_script();
	} else {
		if (process.argv[6 + indexOffset] != "create") {
			ssh_file = process.argv[6 + indexOffset];
		}
	}
	//--------end ssh related

	//--------dir related
	var username =  String(require('child_process').execSync( "whoami", { encoding: 'utf8', timeout: 1000 } )).trim();
	var params = yield run(__dirname + "/../shell_scripts/create_dirs.sh \"/var\" \"" + username + "\""); // params [code,output,message]
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
	//--------end dir related

	//--------notifications
	var email = global.EMAIL = process.argv[7 + indexOffset] || (yield question('Email for notifications. (Enter): '));
	//--------end notifications

	//--------ssh copy/create
	if (ssh_file) { yield run('cp ' + ssh_file + ' ' + KEY_PATH + MASTER_KEY+';'); }
	else { yield run('ssh-keygen -t rsa -C "' + email + '" -N "" -f ' + KEY_PATH + MASTER_KEY + ';'); }
	var content = yield fsread(KEY_PATH + MASTER_KEY + ".pub",{encoding:'utf8'});
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';chmod 644 ' + KEY_PATH + MASTER_KEY + ".pub");
	//--------end ssh copy/create

	var buildnames = [];
	//--------git related
	if (process.argv[8 + indexOffset] || $c.isNull(process.argv[8 + indexOffset]) && process.argv.length < 2 + indexOffset) {
		var skip = yield question('Let\'s create a project or enter \'skip\' to do this later: ');
		while (skip != 'skip' && !(skip in no)) {
			buildnames.push(yield git_script(
				process.argv[8 + indexOffset],
				process.argv[9 + indexOffset],
				fqdn,
				process.argv[10 + indexOffset],
				process.argv[11 + indexOffset],
				process.argv[13 + indexOffset],
				process.argv[14 + indexOffset]));

			skip = (yield question('Add another project? (no): ')) || "no";
		}
	}
	//--------end git related

	//--------move app and start deploy service
	yield run("mkdir -p " + PROJECT_PATH + ";");
	yield run("mkdir -p " + LOG_PATH + ";");
	yield run("mkdir -p " + CONFIG_PATH + ";");
	yield run("cp -r " + __dirname.replace('bin','') + "* " + PROJECT_PATH);
	yield run('chown -R ' + username + ' ' + BASE_PATH + ';');
	yield writeNodeConfig(sport,hport,scuid,authu,authp,email,env,fqdn);
	yield run("echo \"" + $c.replace_all(JSON.stringify(apps),'"','\\""') + "\" > " + CONFIG_PATH + "craydent_deploy_config.json;");

	if (buildnames.length) {
		yield deploy_script(buildnames,sport,hport,authu,authp);
	}
	yield updateRoutes();
	yield run("nohup node " + NODE_PATH + "deploy_server.js " + sport + " " + hport + " '" + scuid + "' '" + authu + "' '" + authp + "' > " + LOG_PATH + "deploy_server.js.log 2>&1 &");
	//--------end move app and start deploy service

	console.log('Completed');
	rl.close();
	process.exit();
});
function hidden(query) {
	return new Promise(function(res) {
		process.stdin.on("data", function (char) {
			char = char + "";
			switch (char) {
				case "\n":
				case "\r":
				case "\u0004":
					rl.pause();
					break;
				default:
					process.stdout.write("\033[2K\033[200D" + query + Array(rl.line.length + 1).join("*"));
					break;
			}
		});

		rl.question(query, function (value) {
			rl.history = rl.history.slice(1);
			res(value);
		});
	});
}